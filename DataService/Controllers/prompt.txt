I'm going to give you some JSON and I need you to reverse-engineer a hardcoded C# variable that would serialize to the JSON.

The JSON is a representation of a `Dictionary<string, NominalPeriodReturn[]>`.

A `NominalPeriodReturn` looks like this:

    public readonly struct NominalPeriodReturn(string ticker, decimal startingBalance, PeriodReturn periodReturn)
    {
        public string Ticker { get; init; } = ticker ?? periodReturn.SourceTicker;

        public ReturnPeriod ReturnPeriod { get; init; } = periodReturn.ReturnPeriod;

        public DateTime PeriodStart { get; init; } = periodReturn.PeriodStart;

        /// <summary>
        /// Scale is 0 - 100, not 0 - 1.
        /// </summary>
        public decimal ReturnPercentage { get; init; } = periodReturn.ReturnPercentage;

        public decimal StartingBalance { get; init; } = startingBalance;

        public decimal EndingBalance { get { return StartingBalance + BalanceIncrease; } }

        public decimal BalanceIncrease { get { return StartingBalance * (this.ReturnPercentage / 100m); } }
    }

Here is PeriodReturn:

    public readonly struct PeriodReturn
    {
        public DateTime PeriodStart { get; init; }

        /// <summary>
        /// Scale is 0 - 100, not 0 - 1.
        /// </summary>
        public decimal ReturnPercentage { get; init; }

        public string SourceTicker { get; init; }

        public ReturnPeriod ReturnPeriod { get; init; }

        public string ToCsvLine()
        {
            return $"{PeriodStart:yyyy-MM-dd},{ReturnPercentage},{SourceTicker},{ReturnPeriod}";
        }

        public static PeriodReturn ParseCsvLine(string csvLine)
        {
            var cells = csvLine.Split(',');

            return new()
            {
                PeriodStart = DateTime.Parse(cells[0]),
                ReturnPercentage = decimal.Parse(cells[1]),
                SourceTicker = cells[2],
                ReturnPeriod = Enum.Parse<ReturnPeriod>(cells[3])
            };
        }
    }

And here is ReturnPeriod:

    public enum ReturnPeriod
    {
        Daily,
        Monthly,
        Yearly
    }

Here is the JSON, below. Look at it and give me the hardcoded C# variable. Remove trailing zeros on decimals, however, and align the element object parameters columnarly.

{
  "#1X": [
    {
      "Ticker": "#1X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-01-01T00:00:00",
      "ReturnPercentage": 0,
      "StartingBalance": 50.0,
      "EndingBalance": 50.0,
      "BalanceIncrease": 0.0
    },
    {
      "Ticker": "#1X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-02-01T00:00:00",
      "ReturnPercentage": 0,
      "StartingBalance": 100.00,
      "EndingBalance": 100.00,
      "BalanceIncrease": 0.00
    },
    {
      "Ticker": "#1X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-03-01T00:00:00",
      "ReturnPercentage": 0,
      "StartingBalance": 200.000,
      "EndingBalance": 200.000,
      "BalanceIncrease": 0.000
    },
    {
      "Ticker": "#1X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-04-01T00:00:00",
      "ReturnPercentage": 0,
      "StartingBalance": 400.0000,
      "EndingBalance": 400.0000,
      "BalanceIncrease": 0.0000
    },
    {
      "Ticker": "#1X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-05-01T00:00:00",
      "ReturnPercentage": 0,
      "StartingBalance": 800.00000,
      "EndingBalance": 800.00000,
      "BalanceIncrease": 0.00000
    },
    {
      "Ticker": "#1X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-06-01T00:00:00",
      "ReturnPercentage": 0,
      "StartingBalance": 1600.000000,
      "EndingBalance": 1600.000000,
      "BalanceIncrease": 0.000000
    },
    {
      "Ticker": "#1X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-07-01T00:00:00",
      "ReturnPercentage": 0,
      "StartingBalance": 3200.0000000,
      "EndingBalance": 3200.0000000,
      "BalanceIncrease": 0
    },
    {
      "Ticker": "#1X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-08-01T00:00:00",
      "ReturnPercentage": 0,
      "StartingBalance": 6400.00000000,
      "EndingBalance": 6400.00000000,
      "BalanceIncrease": 0
    },
    {
      "Ticker": "#1X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-09-01T00:00:00",
      "ReturnPercentage": 0,
      "StartingBalance": 12800.000000000,
      "EndingBalance": 12800.000000000,
      "BalanceIncrease": 0
    },
    {
      "Ticker": "#1X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-10-01T00:00:00",
      "ReturnPercentage": 0,
      "StartingBalance": 25600.0000000000,
      "EndingBalance": 25600.0000000000,
      "BalanceIncrease": 0
    },
    {
      "Ticker": "#1X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-11-01T00:00:00",
      "ReturnPercentage": 0,
      "StartingBalance": 51200.00000000000,
      "EndingBalance": 51200.00000000000,
      "BalanceIncrease": 0
    }
  ],
  "#3X": [
    {
      "Ticker": "#3X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-01-01T00:00:00",
      "ReturnPercentage": 200,
      "StartingBalance": 50.0,
      "EndingBalance": 150.0,
      "BalanceIncrease": 100.0
    },
    {
      "Ticker": "#3X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-02-01T00:00:00",
      "ReturnPercentage": 200,
      "StartingBalance": 100.00,
      "EndingBalance": 300.00,
      "BalanceIncrease": 200.00
    },
    {
      "Ticker": "#3X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-03-01T00:00:00",
      "ReturnPercentage": 200,
      "StartingBalance": 200.000,
      "EndingBalance": 600.000,
      "BalanceIncrease": 400.000
    },
    {
      "Ticker": "#3X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-04-01T00:00:00",
      "ReturnPercentage": 200,
      "StartingBalance": 400.0000,
      "EndingBalance": 1200.0000,
      "BalanceIncrease": 800.0000
    },
    {
      "Ticker": "#3X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-05-01T00:00:00",
      "ReturnPercentage": 200,
      "StartingBalance": 800.00000,
      "EndingBalance": 2400.00000,
      "BalanceIncrease": 1600.00000
    },
    {
      "Ticker": "#3X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-06-01T00:00:00",
      "ReturnPercentage": 200,
      "StartingBalance": 1600.000000,
      "EndingBalance": 4800.000000,
      "BalanceIncrease": 3200.000000
    },
    {
      "Ticker": "#3X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-07-01T00:00:00",
      "ReturnPercentage": 200,
      "StartingBalance": 3200.0000000,
      "EndingBalance": 9600.0000000,
      "BalanceIncrease": 6400.0000000
    },
    {
      "Ticker": "#3X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-08-01T00:00:00",
      "ReturnPercentage": 200,
      "StartingBalance": 6400.00000000,
      "EndingBalance": 19200.00000000,
      "BalanceIncrease": 12800.00000000
    },
    {
      "Ticker": "#3X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-09-01T00:00:00",
      "ReturnPercentage": 200,
      "StartingBalance": 12800.000000000,
      "EndingBalance": 38400.000000000,
      "BalanceIncrease": 25600.000000000
    },
    {
      "Ticker": "#3X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-10-01T00:00:00",
      "ReturnPercentage": 200,
      "StartingBalance": 25600.0000000000,
      "EndingBalance": 76800.0000000000,
      "BalanceIncrease": 51200.0000000000
    },
    {
      "Ticker": "#3X",
      "ReturnPeriod": 1,
      "PeriodStart": "2023-11-01T00:00:00",
      "ReturnPercentage": 200,
      "StartingBalance": 51200.00000000000,
      "EndingBalance": 153600.00000000000,
      "BalanceIncrease": 102400.00000000000
    }
  ]
}